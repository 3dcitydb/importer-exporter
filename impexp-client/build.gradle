import org.apache.tools.ant.filters.ReplaceTokens

plugins {
    id 'application'
    id 'com.jfrog.bintray' version '1.8.4'
}

applicationName = project.appName
mainClassName = 'org.citydb.ImpExp'

configurations {
    izpack
    doc
}

dependencies {
    compile project(':impexp-core')
    compile project(':impexp-client-common')
    compile project(':impexp-kml-collada-plugin')
    compile 'args4j:args4j:2.33'
    compile 'com.fifesoft:rsyntaxtextarea:3.0.3'
    compile ('org.citydb:swingx-ws:1.1.2') {
        transitive = false
    }
    compile ('org.citydb:swingx-all:1.6.7') {
        transitive = false
    }

    izpack fileTree(dir: 'resources/izpack/lib', include: '*.jar')
    doc 'org.kohsuke.metainf-services:metainf-services:1.8'
    doc 'org.swinglabs.swingx:swingx-mavensupport:1.6.5-1'
}

task processReadme(type: Copy) {
    from('resources/doc/README.txt') {
        filteringCharset = 'UTF-8'
        filter(ReplaceTokens, tokens: [
                name: project.impexpName,
                version: project.version,
                date: project.date.format('yyyy-MM-dd'),
                citydbName: project.citydbName,
                citydbVersion: project.citydbVersion,
                jar: jar.archiveFileName.get(),
                appName: project.appName,
                citydbWebsiteUrl: project.citydbWebsiteUrl,
                citydbVcsUrl: project.citydbVcsUrl,
                vendorName: project.vendorName,
                vendorOrganisation: project.vendorOrganisation,
                vendorCountry: project.vendorCountry,
                vendorCopyright: project.vendorCopyright,
                vendorWebsiteUrl: project.vendorWebsiteUrl
        ])
    }
    into "$buildDir/tmp/doc"
}

javadoc {
    classpath += configurations.doc
}

jar {
    manifest {
        attributes('Main-Class': mainClassName,
                'Class-Path': configurations.runtimeClasspath.collect{ it.name }.join(' ')
        )
        into('META-INF') {
            from processReadme
        }
    }
}

startScripts {
    classpath = jar.outputs.files
    defaultJvmOpts = ['-Xms1G']

    doLast {
        def windowsScript = getWindowsScript()
        def unixScript = getUnixScript()
        windowsScript.text = windowsScript.text
                .replaceFirst('set APP_HOME=.*', '$0\r\nset WORKING_DIR=%CD%')
                .replaceFirst('"%JAVA_EXE%" %DEFAULT_JVM_OPTS%.*', 'start /min cmd /c "$0"')
                .replaceAll('3_D_CITY_DB_', '')
        unixScript.text = unixScript.text
                .replaceFirst('APP_HOME=.*', '$0\nexport APP_HOME\nexport WORKING_DIR=\\$SAVED')
                .replaceAll('3_D_CITY_DB_', '')
    }
}

distributions.main.contents {
    from processReadme
    into('3dcitydb') {
        from "$rootDir/resources/3dcitydb"
    }
    into('3d-web-map-client') {
        from "$rootDir/resources/3d-web-map-client"
    }
    into('manual') {
        from "$rootDir/resources/manual"
    }
    into('contribs') {
        from 'contribs'
    }
    into('plugins') {
        from "$rootDir/resources/plugins"
    }
    into('templates') {
        from "$rootDir/resources/templates"
    }
    into('samples') {
        from "$rootDir/resources/samples"
    }
    into('license') {
        from "$rootDir/resources/license/APACHE-2.0.txt"
        from processLicense
    }
    from(file("$buildDir/tmp/dir")) {
        mkdir "$buildDir/tmp/dir/ade-extensions"
    }
}

task buildInstaller(dependsOn: installDist, group: 'distribution') {
    def installDir = installDist.destinationDir.toString()
    def distDir = distZip.destinationDirectory.get()
    def izpackDir = "$buildDir/tmp/izpack".toString()
    def installer = "$distDir/$project.appName-" + project.version + '-Setup.jar'

    doLast {
        mkdir distDir

        copy {
            from 'resources/izpack'
            into izpackDir
            filesMatching('**/*.xml') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        appName: project.impexpName,
                        appVersion: project.version,
                        appSubPath: '3DCityDB-Importer-Exporter',
                        appShortcut: project.appShortcutName,
                        url: project.citydbWebsiteUrl,
                        citydbName: project.citydbName,
                        citydbVersion: project.citydbVersion,
                        installDir: installDir,
                        pluginsDir: 'plugins',
                        contribsDir: 'contribs',
                        citydbDir: '3dcitydb',
                        startScriptsDir: 'bin',
                        adeExtensionsDir: 'ade-extensions',
                        templatesDir: 'templates',
                        manualDir: 'manual',
                        webMapClientDir: '3d-web-map-client',
                        samplesDir: 'samples',
                        spreadSheetPluginDir: 'plugin-spreadsheet-generator',
                        adeManagerPluginDir: 'plugin-ade-manager'
                ])
            }
            filesMatching('**/license.txt') {
                filteringCharset = 'UTF-8'
                filter(ReplaceTokens, tokens: [
                        license: file("$installDir/license/LICENSE.txt").text,
                        apache: file("$rootDir/resources/license/APACHE-2.0.txt").text
                ])
            }
        }

        ant.taskdef(name: 'izpack', classname: 'com.izforge.izpack.ant.IzPackTask', classpath: configurations.izpack.asPath)
        ant.izpack(input: "$izpackDir/install.xml",
                output: installer,
                basedir: izpackDir
        )
    }
}

bintray {
    user = project.hasProperty('bintrayUser') ? project.property('bintrayUser') : System.getenv('BINTRAY_USER')
    key = project.hasProperty('bintrayApiKey') ? project.property('bintrayApiKey') : System.getenv('BINTRAY_API_KEY')

    publications = ['mavenJava']
    pkg {
        repo = 'maven'
        userOrg = '3dcitydb'
        name = project.name
        websiteUrl = project.citydbVcsUrl
        vcsUrl = project.impexpGit
        issueTrackerUrl = project.impexpIssueTrackerUrl
        licenses = ['Apache-2.0']
        version {
            name = project.version
        }
    }
}