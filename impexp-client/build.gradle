import org.apache.tools.ant.filters.ReplaceTokens

apply plugin: 'application'

applicationName = project.appName
mainClassName = 'org.citydb.ImpExp'

configurations {
    izpack
}

dependencies {
    compile project(':impexp-core')
    compile project(':impexp-plugin-api')
    compile project(':impexp-kml-collada-plugin')
    compile 'args4j:args4j:2.33'
    compile ('org.citydb:swingx-ws:1.1.0') {
        transitive = false
    }
    compile ('org.citydb:swingx-all:1.6.5-2') {
        transitive = false
    }

    izpack fileTree(dir: 'resources/izpack/lib', include: '*.jar')
}

startScripts {
    defaultJvmOpts = ['-Xms1G']
    doLast {
        def windowsScript = getWindowsScript()
        def unixScript = getUnixScript()
        windowsScript.text = windowsScript.text
                .replaceFirst('set APP_HOME=.*', '$0\r\nset WORKING_DIR=%CD%')
                .replaceFirst('"%JAVA_EXE%" %DEFAULT_JVM_OPTS%.*', 'start /min "" $0')
                .replaceAll('3_D_CITY_DB_IMPORTER_EXPORTER_OPTS', 'IMPORTER_EXPORTER_OPTS')
        unixScript.text = unixScript.text
                .replaceFirst('APP_HOME=.*', '$0\nexport APP_HOME\nexport WORKING_DIR=\\$SAVED')
                .replaceAll('3_D_CITY_DB_IMPORTER_EXPORTER_OPTS', 'IMPORTER_EXPORTER_OPTS')
    }
}

distributions.main.contents {
    from('resources/doc/README.txt') {
        filter(ReplaceTokens, tokens: [
                name: project.impexpName,
                version: project.version,
                date: project.date.format('yyy-MM-dd'),
                citydbName: project.citydbName,
                citydbVersion: project.citydbVersion,
                jar: jar.archiveName,
                appName: project.appName,
                citydbWebsiteUrl: project.citydbWebsiteUrl,
                citydbVcsUrl: project.citydbVcsUrl,
                vendorName: project.vendorName,
                vendorOrganisation: project.vendorOrganisation,
                vendorCountry: project.vendorCountry,
                vendorCopyright: project.vendorCopyright,
                vendorWebsiteUrl: project.vendorWebsiteUrl
        ])
    }
    into('contribs') {
        from 'contribs'
    }
    into('plugin-api') {
        from tasks.getByPath(':impexp-plugin-api:installDist')
    }
    into('license') {
        from "$rootDir/resources/license/APACHE-2.0.txt"
        from "$rootDir/resources/license/LICENSE.txt"
    }
}

task buildInstaller(dependsOn: installDist) {
    def izpackDir = "$buildDir/tmp/izpack"
    def installer = "$buildDir/distributions/$project.appInstallerFile"
    inputs.dir 'resources/izpack'
    outputs.file installer
    mkdir izpackDir

    doLast {
        copy {
            from 'resources/izpack'
            into izpackDir
            filter(ReplaceTokens, tokens: [
                    license: file("$rootDir/resources/license/LICENSE.txt").text,
                    apache: file("$rootDir/resources/license/APACHE-2.0.txt").text,
                    appName: project.impexpName,
                    appVersion: project.version,
                    appSubPath: project.appInstallDir,
                    appShortcut: project.appShortcutName,
                    url: project.citydbWebsiteUrl,
                    citydbName: project.citydbName,
                    citydbVersion: project.citydbVersion,
                    installDir: "$buildDir/install/$project.appName".toString()
            ])
        }

        ant.taskdef(name: 'izpack', classname: 'com.izforge.izpack.ant.IzPackTask', classpath: configurations.izpack.asPath)
        ant.izpack(input: "$izpackDir/izpack-install.xml",
                output: installer,
                basedir: izpackDir
        )
    }
}